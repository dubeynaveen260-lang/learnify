{
  "rules": {
    "users": {
      ".read": "auth != null",
      "$uid": {
        ".write": "auth != null && auth.uid === $uid",
        "email": {
          ".validate": "newData.isString() && newData.val().matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i)"
        },
        "name": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
        },
        "course": {
          ".validate": "newData.isString()"
        },
        "xp": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "level": {
          ".validate": "newData.isNumber() && newData.val() >= 1"
        },
        "badges": {
          ".validate": "newData.hasChildren()"
        },
        "completedTopics": {
          ".validate": "newData.hasChildren()"
        },
        "streak": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "lastLoginDate": {
          ".validate": "newData.isNumber()"
        }
      }
    },
    "discussions": {
      ".read": "auth != null",
      "$discussionId": {
        ".write": "auth != null && (!data.exists() || data.child('authorId').val() === auth.uid)",
        ".validate": "newData.hasChildren(['title', 'subject', 'content', 'authorId', 'authorName', 'timestamp'])",
        "title": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 200"
        },
        "subject": {
          ".validate": "newData.isString()"
        },
        "content": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 5000"
        },
        "authorId": {
          ".validate": "newData.val() === auth.uid"
        },
        "authorName": {
          ".validate": "newData.isString()"
        },
        "timestamp": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        },
        "replies": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "likes": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        }
      }
    },
    "discussionReplies": {
      ".read": "auth != null",
      "$discussionId": {
        "$replyId": {
          ".write": "auth != null",
          ".validate": "newData.hasChildren(['content', 'authorId', 'authorName', 'timestamp'])",
          "content": {
            ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 2000"
          },
          "authorId": {
            ".validate": "newData.val() === auth.uid"
          },
          "authorName": {
            ".validate": "newData.isString()"
          },
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= now"
          }
        }
      }
    },
    "questions": {
      ".read": "auth != null",
      "$questionId": {
        ".write": "auth != null && (!data.exists() || data.child('authorId').val() === auth.uid)",
        ".validate": "newData.hasChildren(['title', 'details', 'authorId', 'authorName', 'timestamp'])",
        "title": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 200"
        },
        "details": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 5000"
        },
        "authorId": {
          ".validate": "newData.val() === auth.uid"
        },
        "authorName": {
          ".validate": "newData.isString()"
        },
        "timestamp": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        },
        "answers": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "votes": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        }
      }
    },
    "studyGroups": {
      ".read": "auth != null",
      "$groupId": {
        ".write": "auth != null && (!data.exists() || data.child('creatorId').val() === auth.uid || data.child('members').hasChild(auth.uid.toString()))",
        ".validate": "newData.hasChildren(['name', 'description', 'creatorId', 'creatorName', 'timestamp'])",
        "name": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
        },
        "description": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 500"
        },
        "creatorId": {
          ".validate": "newData.isString() && newData.val() === auth.uid"
        },
        "creatorName": {
          ".validate": "newData.isString()"
        },
        "members": {
          "$memberId": {
            ".write": "auth != null && (newData.val() === true || !newData.exists())"
          }
        },
        "pendingMembers": {
          "$memberId": {
            ".write": "auth != null && (newData.val() === true || !newData.exists())"
          }
        },
        "timestamp": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        }
      }
    },
    "groupChats": {
      ".read": "auth != null && root.child('studyGroups/' + $groupId + '/members/' + auth.uid).exists()",
      "$groupId": {
        ".write": "auth != null && root.child('studyGroups/' + $groupId + '/members/' + auth.uid).exists()",
        "$messageId": {
          ".validate": "newData.hasChildren(['content', 'senderId', 'senderName', 'timestamp'])",
          "content": {
            ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 1000"
          },
          "senderId": {
            ".validate": "newData.isString() && newData.val() === auth.uid"
          },
          "senderName": {
            ".validate": "newData.isString()"
          },
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= now"
          }
        }
      }
    },
    "userNotifications": {
      ".read": "auth != null && auth.uid === $userId",
      "$userId": {
        ".write": "auth != null && auth.uid === $userId",
        "$notificationId": {
          ".validate": "newData.hasChildren(['message', 'type', 'timestamp', 'read'])",
          "message": {
            ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 200"
          },
          "type": {
            ".validate": "newData.isString() && (newData.val() === 'info' || newData.val() === 'success' || newData.val() === 'error' || newData.val() === 'warning')"
          },
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= now"
          },
          "read": {
            ".validate": "newData.isBoolean()"
          },
          "shown": {
            ".validate": "newData.isBoolean()"
          }
        }
      }
    }
  }
}